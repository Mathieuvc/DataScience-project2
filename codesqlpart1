#Aim of this project: manage the datawarehouse of the MyTunes online platform to be able to analyse the past sales and incoming revenues. 
#This 1st Phase consits of building the datawarehouse, so we create a new Schema: mytunes_dim. 

#To be prudent, we drop the schema to be able to re-run it without errors. 
DROP SCHEMA IF EXISTS mytunes_dim;

CREATE SCHEMA mytunes_dim;

USE mytunes_dim;

#The next step is to create the different dimensions present in our datawarehouse. 
#A dimension table is a table connected to the fact table thanks to the primary key.
#This primary key is auto-incremented which will automatically generate a new number each time we insert a new record into the table. 
#We do this by creating Tables for: 
#		Customers
#		Track
#		Time
#		Invoice 
#In each table we inserted valid_from & valid_to which indicates the time at which a row is entered in a dimension and till when it we be valid. 
#For the time dimension this is not necessaray since it already indicates the time validity. 
#After we create the table, we each time use "insert into" to add the records of the transactional database into the new tables. 


/* creating customer dimension */

CREATE TABLE IF NOT EXISTS dim_customers(
	customer_key INT auto_increment PRIMARY KEY,
    customer_id INT NOT NULL,
    company VARCHAR(80),
    first_name VARCHAR(80) NOT NULL,
    last_name VARCHAR(80) NOT NULL,
    address VARCHAR(200), 
	city VARCHAR(80), 
    state VARCHAR(80), 
    postalcode VARCHAR(10), 
    email VARCHAR(60), 
    valid_from DATETIME NOT NULL DEFAULT NOW(),
    valid_to DATETIME NOT NULL DEFAULT '9999-12-31 00:00:00'
);

/* inserting info in customer dimension table */

INSERT INTO dim_customers(customer_id, company, first_name, last_name, address, city, state, postalcode, email)
SELECT CustomerId, Company, FirstName, LastName, Address, City, State, Postalcode, Email
FROM MyTunes.Customer;

/* creating track dimension */

CREATE TABLE IF NOT EXISTS dim_track(
	track_key INT auto_increment PRIMARY KEY,
    track_id INT NOT NULL,
    track_name VARCHAR(500) NOT NULL,
    album_id INT, 
    album_name VARCHAR(500) NOT NULL,
    artist_id INT,
    artist_name VARCHAR(500) NOT NULL,
    unit_price DECIMAL(10,2), 
    valid_from DATETIME NOT NULL DEFAULT NOW(),
    valid_to DATETIME NOT NULL DEFAULT '9999-12-31 00:00:00'
);


#To be able to insert the information of the transacional datawarehouse in this new table we need to use Inner Join since the information is initially located in two different tables. 
/* inserting info in track dimension table */

INSERT INTO dim_track(track_id, track_name, album_id, album_name, artist_id, artist_name, unit_price)
SELECT t.TrackId, t.Name,t.albumid, t.Title, ar.artistid, ar.Name, t.unitprice
FROM MyTunes.Artist ar INNER JOIN 
	(SELECT TrackId, Name, Title, ArtistId, tr.AlbumId, tr.unitprice
	FROM MyTunes.Track tr INNER JOIN MyTunes.Album al
		ON tr.AlbumId = al.AlbumId) t
	ON ar.ArtistId = t.ArtistId;

/* creating time dimension */

CREATE TABLE IF NOT EXISTS dim_time(
	time_key INT auto_increment PRIMARY KEY,
    year INT NOT NULL,
    month INT NOT NULL,
    quarter INT NOT NULL,
    day INT NOT NULL,
    day_of_week INT NOT NULL 
);

#Using select DISTINCT returns only distinct/different values because you can have duplicates in a table and we only want distinct values. 
/* inserting info in time dimension table */

INSERT INTO dim_time(year, month, quarter, day, day_of_week)
select distinct year(InvoiceDate), month(InvoiceDate), quarter(InvoiceDate), dayofmonth(InvoiceDate), dayofweek(InvoiceDate)
from MyTunes.invoice;

CREATE TABLE IF NOT EXISTS dim_invoice(
	invoice_key INT auto_increment PRIMARY KEY,
    invoice_id INT NOT NULL,
    billing_country VARCHAR(80) NOT NULL,
    billing_state VARCHAR(80),
    billing_city VARCHAR(80),
    billing_address VARCHAR(100),
    billing_postal_code VARCHAR(80), 
    Total decimal (10,2),
    valid_from DATETIME NOT NULL DEFAULT NOW(),
    valid_to DATETIME NOT NULL DEFAULT '9999-12-31 00:00:00'
);

/* inserting info in invoice dimension table */

INSERT INTO dim_invoice(invoice_id, billing_country, billing_state, billing_city, billing_address, billing_postal_code, total)
SELECT InvoiceId, BillingCountry, BillingState, Billingcity, Billingaddress, Billingpostalcode, Total
FROM MyTunes.invoice;


#Now that the different dimension tables are created, we can start with the fact table.   
#A fact table works with the different dimension tables created above and so it contains the data to be able to analyze and process it.  
#So here we see it contains the foreign keys of the dimension tables and a measure that is able to process the total amount paid by a customer.

/* create the fact table of our star schema */

CREATE TABLE IF NOT EXISTS fct_order_value( 
    customer_key INT NOT NULL,
    track_key INT NOT NULL,
    time_key  INT NOT NULL,
    invoice_key INT NOT NULL, 
  	order_value FLOAT NOT NULL,
    
    	FOREIGN KEY (customer_key) REFERENCES dim_customers(customer_key),
    	FOREIGN KEY (track_key) REFERENCES dim_track(track_key),
		FOREIGN KEY (time_key) REFERENCES dim_time(time_key),
		FOREIGN KEY (invoice_key) REFERENCES dim_invoice(invoice_key)
);

/* insert the values of the keys in fact table and total amount ordered in fact table*/

INSERT INTO fct_order_value(customer_key, track_key, time_key, invoice_key, order_value)	
SELECT cd.customer_key, trd.track_key, tid.time_key, di.invoice_key, def.total_amount
FROM 
    (SELECT i.CustomerId, year(i.InvoiceDate) as year, quarter(i.InvoiceDate) as quarter, month(i.InvoiceDate) as month, dayofmonth(i.InvoiceDate) as day, dayofweek(i.InvoiceDate) as day_of_week,	
			i.BillingCountry, i.InvoiceId, abc.TrackId, abc.total_amount
	FROM MyTunes.Invoice i INNER JOIN 
		(SELECT invoiceId, il.TrackId,il.UnitPrice*il.Quantity as total_amount
			FROM MyTunes.InvoiceLine il INNER JOIN MyTunes.Track tr 
			ON tr.TrackID = il.TrackID) abc
		ON i.InvoiceId = abc.InvoiceId) def
	INNER JOIN dim_customers cd
    INNER JOIN dim_time tid
    INNER JOIN dim_invoice di
    INNER JOIN dim_track trd
	ON (cd.customer_id = def.CustomerID AND cd.valid_to = '9999-12-31 00:00:00' 
		AND tid.year = def.year AND tid.quarter = def.quarter AND tid.month = def.month AND tid.day = def.day AND tid.day_of_week = def.day_of_week
        AND di.invoice_id = def.InvoiceId AND di.valid_to = '9999-12-31 00:00:00'
        AND trd.track_id = def.TrackId AND trd.valid_to = '9999-12-31 00:00:00'
);


#In order to illustrate the business relevance of the dimensional data structure, we will illustrate this by doing some queries 
#Queries using our star schema to compute the sales per artist, album, customer and BillingCountry per year

#Sales per artist; this allows us to see which artist has sold the most tracks. 
#This could be interesting to take into account which artists we have to closely follow-up when they release a new track.
#We might want to add those tracks to our platform
#The time dimension allows us to track the changes in sales along the years; in this way we can track the popularity of the artists

SELECT dt.artist_name, sum(f.order_value) as sales , dti.year
FROM fct_order_value f INNER JOIN dim_track dt INNER JOIN dim_time dti
	on (dt.track_key = f.track_key AND dti.time_key = f.time_key)
group by dt.artist_name, dti.year
order by dt.artist_name;

#Sales per album; this allows us to see which albums have been sold the most. 
#This could be interesting to e.g. search for albums of the same artist or genre and add this to our platform
#The time dimension allows us to track the changes in sales along the years; in this way we can track the popularity of the albums
SELECT dt.album_name, sum(f.order_value) as sales, dti.year 
FROM fct_order_value f JOIN dim_track dt  JOIN dim_time dti
	on (dt.track_key = f.track_key AND dti.time_key = f.time_key)
group by dt.album_name, dti.year 
order by dt.album_name;

#Sales per customer; this allows us to see which customer has bought the most on our platform. 
#This allows us to segment the customers according to their spending
#We might want to think of different marketing offers according to the segments
#The time dimension allows us to track the changes in sales along the years; in this way we can track whether a customer is still active or not
#If the customer is no longer active; we could target them by remembering our services and maybe offer them some discounts to re-join our platform

SELECT dc.first_name, dc.last_name, dc.address, dc.city, dc.state, dc.postalcode, dc.email, sum(f.order_value), dti.year
FROM fct_order_value f JOIN dim_customers dc JOIN dim_time dti
	on (dc.customer_key = f.customer_key AND dti.time_key = f.time_key)
group by dc.first_name, dc.last_name, dc.address, dc.city, dc.state, dc.postalcode, dc.email, dti.year 
Order by dc.last_name;

#Sales per Billingcountry; this allows us to see which country has spends the most on our platform. 
#This allows us to segment the countries according to their spending
#We might want to think of different marketing offers according to the coutnry
#The time dimension allows us to track the changes in sales along the years; in this way we can check whether there are certain trends in countries 
#If for example, sales in a certain country decrease significantly, we might target a country to increase sales again

SELECT di.billing_country, sum(f.order_value), dti.year
FROM fct_order_value f JOIN dim_invoice di JOIN dim_time dti
	on (di.invoice_key = f.invoice_key AND dti.time_key = f.time_key)
group by di.billing_country, dti.year
order by di.billing_country;


