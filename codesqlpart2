/* 2nd PART */

USE mytunes_dim;

/* Create staging table for customers*/ 

CREATE TABLE stg_customers(
SELECT * FROM MyTunes.customer );

/* create temporary table for customer*/ 

CREATE TEMPORARY TABLE tmp_customers_changed 
SELECT dc.customer_key
FROM dim_customers dc
INNER JOIN stg_customers sc 
ON dc.customer_id = sc.CustomerId
WHERE (dc.company <> sc.company OR dc.last_name <> sc.lastname OR dc.first_name <> sc.firstname)
	AND dc.valid_to = '9999-12-31 00:00:00';

/* Identify the cutomers from the staging that were added */

INSERT INTO dim_customers( customer_id, company, first_name, last_name) 
SELECT sc.CustomerId, sc.company, sc.LastName, sc.FirstName
FROM stg_customers sc 
LEFT JOIN dim_customers dc
ON dc.customer_id = sc.CustomerId
WHERE (dc.company <> sc.company OR dc.last_name <> sc.lastname OR dc.first_name <> sc.firstname)
	AND (dc.valid_to = '9999-12-31 00:00:00' OR dc.valid_to IS NULL);

/* Change the valid date */ 

UPDATE dim_customers SET valid_to = NOW() WHERE customer_key IN 
	(SELECT customer_key
    FROM tmp_customers_changed); 
 
DROP TABLE tmp_customers_changed; 

/* create staging table for track*/ 

CREATE TABLE stg_track(
SELECT t.TrackId as track_id, t.Name as track_name, t.title as album_name , ar.Name as artist_name
FROM MyTunes.Artist ar INNER JOIN 
	(SELECT TrackId, Name, Title, ArtistId, tr.AlbumId
	FROM MyTunes.Track tr INNER JOIN MyTunes.Album al
		ON tr.AlbumId = al.AlbumId) t
	ON ar.ArtistId = t.ArtistId);

/* create temporary table for track*/ 

CREATE TEMPORARY TABLE tmp_tracks_changed 
SELECT dt.track_key
FROM dim_track dt
INNER JOIN stg_track st 
ON dt.track_id = st.Track_Id
WHERE (dt.track_name <> st.track_name OR dt.album_name <> st.album_name OR dt.artist_name <> st.artist_name)
	AND dt.valid_to = '9999-12-31 00:00:00';

/* Identify the tracks from the staging that were added */

INSERT INTO dim_track( track_id, track_name, album_name, artist_name) 
SELECT st.Track_Id, st.track_name, st.album_name, st.artist_name
FROM stg_track st 
LEFT JOIN dim_track dt
ON dt.track_id = st.Track_Id
WHERE (dt.track_name <> st.track_name OR dt.album_name <> st.album_name OR dt.artist_name <> st.artist_name)
	AND (dt.valid_to = '9999-12-31 00:00:00' OR dt.valid_to IS NULL);

/* Change the valid date for the changed tracks*/ 

UPDATE dim_track SET valid_to = NOW() WHERE track_key IN 
	(SELECT track_key
    FROM tmp_tracks_changed); 
    
DROP TABLE tmp_tracks_changed; 

/* create staging table for invoice */
CREATE TABLE stg_invoice(
SELECT * FROM MyTunes.Invoice
);

/* create temporary table for invoice*/ 
CREATE TEMPORARY TABLE tmp_invoice_changed 
SELECT di.invoice_key
FROM dim_invoice di
INNER JOIN stg_invoice si
ON di.invoice_id = si.invoiceid
WHERE (di.billing_country <> si.BillingCountry)
	AND di.valid_to = '9999-12-31 00:00:00';

/* Identify the invoices from the staging that were added */
INSERT INTO dim_invoice(invoice_id, billing_country)
SELECT si.invoiceid, si.billingcountry
FROM stg_invoice si 
LEFT JOIN dim_invoice di
ON di.invoice_id = si.invoiceid
WHERE (di.billing_country <> si.BillingCountry)
	AND (di.valid_to = '9999-12-31 00:00:00' OR di.valid_to IS NULL);
    
/* Change the valid date for the changed invoices */ 
UPDATE dim_invoice SET valid_to = NOW() WHERE invoice_key IN 
	(SELECT invoice_key
    FROM tmp_invoice_changed); 

DROP TABLE tmp_invoice_changed;

/* Update the time dimension */  
DROP TABLE tmp_time_changed;

CREATE TABLE tmp_time_changed 
SELECT year(si.invoicedate) as year, month(si.invoicedate) as month, day(si.invoicedate) as day, quarter(si.invoicedate) as quarter,dayofweek(si.invoicedate) as day_of_week
FROM stg_invoice si LEFT JOIN dim_time dt
ON year(InvoiceDate) = dt.year AND month(InvoiceDate) = month AND quarter(InvoiceDate) = dt.quarter AND day(InvoiceDate) = dt.day
WHERE dt.quarter IS NULL;

INSERT INTO dim_time(year, month, day, quarter, day_of_week)
SELECT *
FROM tmp_time_changed; 

DROP TABLE tmp_time_changed;
